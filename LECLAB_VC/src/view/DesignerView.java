package view;
import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import contoller.DesignerViewController;
import contoller.ParameterViewController;
import event.LeclabEvent;
import experiment.Block;
import experiment.Experimentation;
import experiment.Trial;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.AbstractButton;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import layout.VerticalFlowLayout;
import layout.VerticalWrapLayout;
import parameters.NoiseParameter;
import parameters.TactileDistractorParameter;
import parameters.VisualDistractorParameter;
import utility.FolderReader;
import utility.Global;
/**
 * View for the designer of experimentation. This view will enable the designer
 * to build experiments by defining what composes them.
 * @author Jean-Ã‰tienne
 */
public class DesignerView extends javax.swing.JFrame implements Observer{
    /**
     * This is the reference to the controller of this view in charge of
     * updating the model.
     * @see ParameterViewController
     */
    private DesignerViewController m_controller;
    
    /**
     * List of Netbean's generated buttons
     */
    private LinkedList<AbstractButton> m_netbeansButtons;
    
    /**
     * HasMap linking every block of the experimentation to his jToggleButton
     */
    private BiMap<Block, javax.swing.JToggleButton> m_currentBlocks;
    
    /**
     * HasMap linking every trial of the experimentation to his jToggleButton
     */
    private BiMap<Trial, javax.swing.JToggleButton> m_currentTrials;
    
    /**
     * Currently selected Block, null if none selected
     */
    private Block m_selectedBlock;
    
    /**
     * Currently selected Trial, null if none selected
     */
    private Trial m_selectedTrial;
    
    /**
     * Empty block used to compare with other block to see if there are empty too
     */
    private static final Block EMPTY_BLOCK = new Block();
    
    /**
     * Empty trial used to compare with other block to see if there are empty too
     */
    private static final Trial EMPTY_TRIAL = new Trial();
    
    /**
     * Creates new form NewJFrame
     */    
    public DesignerView() {
        m_controller = new DesignerViewController();
        m_netbeansButtons = new LinkedList<>();
        m_currentBlocks = HashBiMap.create();
        m_currentTrials = HashBiMap.create();
        m_selectedBlock = EMPTY_BLOCK;
        m_selectedTrial = EMPTY_TRIAL;
        initComponents();

        m_controller.loadDefaultParameters();
      
        this.setExtendedState( this.getExtendedState()|JFrame.MAXIMIZED_BOTH );
        
        //Link the view to the experimentation
        Experimentation.getInstance().addObserver(this);        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        experience_scrollPane = new javax.swing.JScrollPane();
        experience_panel = new javax.swing.JPanel();
        experience_toolBar = new javax.swing.JToolBar();
        saveExperimentation_button = new javax.swing.JButton();
        loadExperimentation_button = new javax.swing.JButton();
        newExperimentation_button = new javax.swing.JButton();
        actionCommand_separator = new javax.swing.JToolBar.Separator();
        undo_button = new javax.swing.JButton();
        redo_button = new javax.swing.JButton();
        commandParameters_separator = new javax.swing.JToolBar.Separator();
        experienceParameters_button = new javax.swing.JButton();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        supervisorMode_button = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(10, 32767));
        blocks_scrollPane = new javax.swing.JScrollPane();
        blocks_panel = new javax.swing.JPanel();
        block_panel = new javax.swing.JPanel();
        blocParameters_panel = new javax.swing.JPanel();
        nbTrials_spinner = new javax.swing.JSpinner();
        nbTrials_label = new javax.swing.JLabel();
        practice_checkBox = new javax.swing.JCheckBox();
        visualDistractor_checkBox = new javax.swing.JCheckBox();
        tactileDistractor_checkBox = new javax.swing.JCheckBox();
        noise_checkBox = new javax.swing.JCheckBox();
        nbTrialsConfirm_button = new javax.swing.JButton();
        retroaction_checkBox = new javax.swing.JCheckBox();
        blockName_textField = new javax.swing.JTextField();
        blockName_label = new javax.swing.JLabel();
        trialWords_scrollPane = new javax.swing.JScrollPane();
        trialWords_panel = new javax.swing.JPanel();
        trialWords_comboBox = new javax.swing.JComboBox();
        trials_scrollPane = new javax.swing.JScrollPane();
        trials_panel = new javax.swing.JPanel();
        saveBlock_button = new javax.swing.JButton();
        deleteBlock_button = new javax.swing.JButton();
        duplicateBlock_button = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        loadBlock_button = new javax.swing.JButton();
        addBlock_button = new javax.swing.JButton();
        experimentationMenu_menuBar = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("LECLAB+    Module Designer");
        setName("DesignerVue"); // NOI18N

        experience_toolBar.setFloatable(false);
        experience_toolBar.setRollover(true);

        saveExperimentation_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/save_icon&32.png"))); // NOI18N
        saveExperimentation_button.setText("Sauvegarder");
        saveExperimentation_button.setActionCommand("saveExperience");
        saveExperimentation_button.setFocusable(false);
        saveExperimentation_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveExperimentation_button.setMaximumSize(new java.awt.Dimension(120, 50));
        saveExperimentation_button.setMinimumSize(new java.awt.Dimension(120, 50));
        saveExperimentation_button.setPreferredSize(new java.awt.Dimension(120, 50));
        saveExperimentation_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExperimentation_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(saveExperimentation_button);
        m_netbeansButtons.add(saveExperimentation_button);

        loadExperimentation_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/folder_open_icon&32.png"))); // NOI18N
        loadExperimentation_button.setText("Charger");
        loadExperimentation_button.setActionCommand("loadExperience");
        loadExperimentation_button.setFocusable(false);
        loadExperimentation_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loadExperimentation_button.setMaximumSize(new java.awt.Dimension(96, 50));
        loadExperimentation_button.setMinimumSize(new java.awt.Dimension(96, 50));
        loadExperimentation_button.setPreferredSize(new java.awt.Dimension(96, 50));
        loadExperimentation_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExperimentation_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(loadExperimentation_button);
        m_netbeansButtons.add(loadExperimentation_button);

        newExperimentation_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/doc_plus_icon&32.png"))); // NOI18N
        newExperimentation_button.setText("Nouveau");
        newExperimentation_button.setActionCommand("newExperience");
        newExperimentation_button.setFocusable(false);
        newExperimentation_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        newExperimentation_button.setMaximumSize(new java.awt.Dimension(100, 50));
        newExperimentation_button.setMinimumSize(new java.awt.Dimension(100, 50));
        newExperimentation_button.setPreferredSize(new java.awt.Dimension(100, 50));
        newExperimentation_button.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                doubleclick(evt);
            }
        });
        newExperimentation_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newExperimentation_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(newExperimentation_button);
        m_netbeansButtons.add(newExperimentation_button);

        experience_toolBar.add(actionCommand_separator);

        undo_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/undo_icon&32.png"))); // NOI18N
        undo_button.setText("Annuler");
        undo_button.setActionCommand("undo");
        undo_button.setFocusable(false);
        undo_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        undo_button.setMaximumSize(new java.awt.Dimension(94, 50));
        undo_button.setMinimumSize(new java.awt.Dimension(94, 50));
        undo_button.setPreferredSize(new java.awt.Dimension(94, 50));
        experience_toolBar.add(undo_button);
        m_netbeansButtons.add(undo_button);
        undo_button.setVisible(false);

        redo_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/redo_icon&32.png"))); // NOI18N
        redo_button.setText("RÃ©tablir");
        redo_button.setActionCommand("redo");
        redo_button.setFocusable(false);
        redo_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        redo_button.setMaximumSize(new java.awt.Dimension(94, 50));
        redo_button.setMinimumSize(new java.awt.Dimension(94, 50));
        redo_button.setPreferredSize(new java.awt.Dimension(94, 50));
        experience_toolBar.add(redo_button);
        m_netbeansButtons.add(redo_button);
        redo_button.setVisible(false);

        experience_toolBar.add(commandParameters_separator);
        commandParameters_separator.setVisible(false);

        experienceParameters_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/cogs_icon&32.png"))); // NOI18N
        experienceParameters_button.setText("ParamÃ¨tres");
        experienceParameters_button.setActionCommand("experienceParameters");
        experienceParameters_button.setFocusable(false);
        experienceParameters_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        experienceParameters_button.setMaximumSize(new java.awt.Dimension(110, 50));
        experienceParameters_button.setMinimumSize(new java.awt.Dimension(110, 50));
        experienceParameters_button.setPreferredSize(new java.awt.Dimension(110, 50));
        experienceParameters_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                experienceParameters_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(experienceParameters_button);
        m_netbeansButtons.add(experienceParameters_button);

        experience_toolBar.add(filler2);

        supervisorMode_button.setBackground(new java.awt.Color(200, 200, 200));
        supervisorMode_button.setText("Mode Superviseur");
        supervisorMode_button.setActionCommand("supervisorMode");
        supervisorMode_button.setMaximumSize(new java.awt.Dimension(120, 48));
        supervisorMode_button.setMinimumSize(new java.awt.Dimension(120, 48));
        supervisorMode_button.setName(""); // NOI18N
        supervisorMode_button.setPreferredSize(new java.awt.Dimension(120, 48));
        supervisorMode_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                supervisorMode_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(supervisorMode_button);
        m_netbeansButtons.add(supervisorMode_button);

        experience_toolBar.add(filler1);

        blocks_scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Blocs"));
        blocks_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        blocks_scrollPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        blocks_scrollPane.setPreferredSize(new java.awt.Dimension(109, 140));

        blocks_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        blocks_scrollPane.setViewportView(blocks_panel);
        blocks_panel.setLayout(new VerticalFlowLayout(4, 10, 10));

        block_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bloc"));
        block_panel.setEnabled(false);

        blocParameters_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("ParamÃ¨tres"));
        blocParameters_panel.setEnabled(false);
        blocParameters_panel.setPreferredSize(new java.awt.Dimension(150, 280));

        nbTrials_spinner.setEnabled(false);
        nbTrials_spinner.setName("nbTrials_spinner"); // NOI18N
        nbTrials_spinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                nbTrials_spinnerStateChanged(evt);
            }
        });

        nbTrials_label.setText("Nb d'essais:");
        nbTrials_label.setEnabled(false);

        practice_checkBox.setText("Pratique");
        practice_checkBox.setActionCommand("practice");
        practice_checkBox.setEnabled(false);
        practice_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        practice_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                practice_checkBoxActionPerformed(evt);
            }
        });

        visualDistractor_checkBox.setText("Distracteur Visuel");
        visualDistractor_checkBox.setActionCommand("visualDistractor");
        visualDistractor_checkBox.setEnabled(false);
        visualDistractor_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        visualDistractor_checkBox.setName("visualDistractor_checkBox"); // NOI18N
        visualDistractor_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visualDistractor_checkBoxActionPerformed(evt);
            }
        });

        tactileDistractor_checkBox.setText("Distracteur Tactile");
        tactileDistractor_checkBox.setActionCommand("tactileDistractor");
        tactileDistractor_checkBox.setEnabled(false);
        tactileDistractor_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        tactileDistractor_checkBox.setName("tactileDistractor_checkBox"); // NOI18N
        tactileDistractor_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tactileDistractor_checkBoxActionPerformed(evt);
            }
        });

        noise_checkBox.setText("Bruit");
        noise_checkBox.setActionCommand("noise");
        noise_checkBox.setEnabled(false);
        noise_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        noise_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noise_checkBoxActionPerformed(evt);
            }
        });

        nbTrialsConfirm_button.setText("Confirmer");
        nbTrialsConfirm_button.setActionCommand("nbTrialsConfirm");
        nbTrialsConfirm_button.setEnabled(false);
        nbTrialsConfirm_button.setName("nbTrialsConfirm_Button"); // NOI18N
        nbTrialsConfirm_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nbTrialsConfirm_buttonActionPerformed(evt);
            }
        });

        retroaction_checkBox.setText("RÃ©troaction");
        retroaction_checkBox.setActionCommand("practice");
        retroaction_checkBox.setEnabled(false);
        retroaction_checkBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        retroaction_checkBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retroaction_checkBoxActionPerformed(evt);
            }
        });

        blockName_textField.setEnabled(false);
        blockName_textField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                blockName_textFieldKeyReleased(evt);
            }
        });

        blockName_label.setText("Nom:");
        blockName_label.setEnabled(false);

        javax.swing.GroupLayout blocParameters_panelLayout = new javax.swing.GroupLayout(blocParameters_panel);
        blocParameters_panel.setLayout(blocParameters_panelLayout);
        blocParameters_panelLayout.setHorizontalGroup(
            blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, blocParameters_panelLayout.createSequentialGroup()
                .addGap(0, 25, Short.MAX_VALUE)
                .addGroup(blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(blockName_label)
                    .addGroup(blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(retroaction_checkBox)
                        .addGroup(blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(blockName_textField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(blocParameters_panelLayout.createSequentialGroup()
                                .addComponent(nbTrials_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nbTrials_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(practice_checkBox, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(visualDistractor_checkBox, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(nbTrialsConfirm_button, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addComponent(tactileDistractor_checkBox)
                        .addComponent(noise_checkBox))))
        );
        blocParameters_panelLayout.setVerticalGroup(
            blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(blocParameters_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(blockName_label)
                .addGap(0, 0, 0)
                .addComponent(blockName_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(blocParameters_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nbTrials_spinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nbTrials_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nbTrialsConfirm_button)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(practice_checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(retroaction_checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(visualDistractor_checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tactileDistractor_checkBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noise_checkBox)
                .addContainerGap(46, Short.MAX_VALUE))
        );

        m_netbeansButtons.add(practice_checkBox);
        m_netbeansButtons.add(visualDistractor_checkBox);
        m_netbeansButtons.add(tactileDistractor_checkBox);
        m_netbeansButtons.add(noise_checkBox);
        m_netbeansButtons.add(nbTrialsConfirm_button);
        m_netbeansButtons.add(practice_checkBox);

        trialWords_scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        trialWords_scrollPane.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Essai"));
        trialWords_scrollPane.setEnabled(false);

        trialWords_comboBox.setEnabled(false);
        trialWords_comboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trialWords_comboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout trialWords_panelLayout = new javax.swing.GroupLayout(trialWords_panel);
        trialWords_panel.setLayout(trialWords_panelLayout);
        trialWords_panelLayout.setHorizontalGroup(
            trialWords_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trialWords_panelLayout.createSequentialGroup()
                .addComponent(trialWords_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 530, Short.MAX_VALUE))
        );
        trialWords_panelLayout.setVerticalGroup(
            trialWords_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trialWords_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trialWords_comboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(44, Short.MAX_VALUE))
        );

        trialWords_scrollPane.setViewportView(trialWords_panel);
        trialWords_panel.setLayout(new FlowLayout(0, 10, 10));

        trials_scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Essais"));
        trials_scrollPane.setToolTipText("");
        trials_scrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        trials_scrollPane.setEnabled(false);
        trials_scrollPane.setMaximumSize(new java.awt.Dimension(2000, 2000));
        trials_scrollPane.setPreferredSize(new java.awt.Dimension(305, 378));

        trials_panel.setMaximumSize(new java.awt.Dimension(2000, 2000));

        javax.swing.GroupLayout trials_panelLayout = new javax.swing.GroupLayout(trials_panel);
        trials_panel.setLayout(trials_panelLayout);
        trials_panelLayout.setHorizontalGroup(
            trials_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        trials_panelLayout.setVerticalGroup(
            trials_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );

        trials_scrollPane.setViewportView(trials_panel);
        trials_panel.setLayout(new VerticalWrapLayout(0, 10, 10));

        saveBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/save_icon&24.png"))); // NOI18N
        saveBlock_button.setText(" Sauvegader");
        saveBlock_button.setActionCommand("saveBlock");
        saveBlock_button.setEnabled(false);
        saveBlock_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        saveBlock_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveBlock_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBlock_buttonActionPerformed(evt);
            }
        });

        deleteBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/delete_icon&24.png"))); // NOI18N
        deleteBlock_button.setText(" Supprimer");
        deleteBlock_button.setActionCommand("deleteBlock");
        deleteBlock_button.setEnabled(false);
        deleteBlock_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        deleteBlock_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        deleteBlock_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBlock_buttonActionPerformed(evt);
            }
        });

        duplicateBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/clipboard_copy_icon&24.png"))); // NOI18N
        duplicateBlock_button.setText(" Dupliquer");
        duplicateBlock_button.setActionCommand("deleteBlock");
        duplicateBlock_button.setEnabled(false);
        duplicateBlock_button.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        duplicateBlock_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        duplicateBlock_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicateBlock_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout block_panelLayout = new javax.swing.GroupLayout(block_panel);
        block_panel.setLayout(block_panelLayout);
        block_panelLayout.setHorizontalGroup(
            block_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, block_panelLayout.createSequentialGroup()
                .addGroup(block_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(blocParameters_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBlock_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveBlock_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(duplicateBlock_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(trials_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(trialWords_scrollPane)
        );
        block_panelLayout.setVerticalGroup(
            block_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(block_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(block_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(block_panelLayout.createSequentialGroup()
                        .addComponent(blocParameters_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(duplicateBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(trials_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trialWords_scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        m_netbeansButtons.add(saveBlock_button);
        m_netbeansButtons.add(deleteBlock_button);
        m_netbeansButtons.add(deleteBlock_button);

        loadBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/folder_open_icon&24.png"))); // NOI18N
        loadBlock_button.setActionCommand("loadBlock");
        loadBlock_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        loadBlock_button.setMaximumSize(new java.awt.Dimension(65, 41));
        loadBlock_button.setMinimumSize(new java.awt.Dimension(65, 41));
        loadBlock_button.setPreferredSize(new java.awt.Dimension(65, 41));
        loadBlock_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBlock_buttonActionPerformed(evt);
            }
        });

        addBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/Add 32x32.png"))); // NOI18N
        addBlock_button.setActionCommand("addBlock");
        addBlock_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBlock_buttonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(86, Short.MAX_VALUE)
                .addComponent(loadBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loadBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 72, Short.MAX_VALUE))
        );

        m_netbeansButtons.add(loadBlock_button);
        m_netbeansButtons.add(addBlock_button);

        javax.swing.GroupLayout experience_panelLayout = new javax.swing.GroupLayout(experience_panel);
        experience_panel.setLayout(experience_panelLayout);
        experience_panelLayout.setHorizontalGroup(
            experience_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(experience_panelLayout.createSequentialGroup()
                .addGroup(experience_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(blocks_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, 0)
                .addComponent(block_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(experience_toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        experience_panelLayout.setVerticalGroup(
            experience_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(experience_panelLayout.createSequentialGroup()
                .addComponent(experience_toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(experience_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(block_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(experience_panelLayout.createSequentialGroup()
                        .addComponent(blocks_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        experience_scrollPane.setViewportView(experience_panel);

        jMenu1.setText("File");
        experimentationMenu_menuBar.add(jMenu1);

        jMenu2.setText("Edit");
        experimentationMenu_menuBar.add(jMenu2);

        setJMenuBar(experimentationMenu_menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(experience_scrollPane)
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(experience_scrollPane)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    /**
     * Listener called when tactileDistractor_checkBox is clicked
     * @param evt 
     */
    private void tactileDistractor_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tactileDistractor_checkBoxActionPerformed
        m_controller.setTactileDistractor(tactileDistractor_checkBox.isSelected(),m_selectedBlock);
    }//GEN-LAST:event_tactileDistractor_checkBoxActionPerformed

    /**
     * Listener called when saveBlock_button is pressed.
     * @param evt 
     */
    private void saveBlock_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBlock_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir l'emplacement de sauvegarde du bloc");

        FileFilter filter = new FileNameExtensionFilter("*.bloc - Fichiers de bloc", "bloc");
        fileChooser.setFileFilter(filter);       

        File destination = new File("../Blocs");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
        
        fileChooser.setSelectedFile(new File(m_selectedBlock.getName()+".bloc"));
        
        int ret = fileChooser.showSaveDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {
                
                m_controller.saveBlock(m_selectedBlock, file);
            }  catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde, vÃ©rifiez que l'emplacement sur le disque est disponible ou que le fichier remplacÃ© n'est pas protÃ©gÃ© en Ã©criture.", "Saving error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }          
        }
    }//GEN-LAST:event_saveBlock_buttonActionPerformed

    /**
     * Listener called when addBlock_button is pressed.
     * @param evt 
     */
    private void addBlock_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBlock_buttonActionPerformed
        m_controller.addBlock();
    }//GEN-LAST:event_addBlock_buttonActionPerformed

    /**
     * Listener called when noise_checkBox is clicked.
     * @param evt 
     */
    private void noise_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noise_checkBoxActionPerformed
        m_controller.setNoise(noise_checkBox.isSelected(),m_selectedBlock);
    }//GEN-LAST:event_noise_checkBoxActionPerformed

    /**
     * Listener called when nbTrials_spinners state changed. It changes the number of trials if
     * it is between 0 and 99.
     * @param evt 
     */
    private void nbTrials_spinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_nbTrials_spinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        if((int)spinner.getValue() < 0){
            spinner.setValue(0);
        }
        else if((int)spinner.getValue() > 99){
            spinner.setValue(99);
        }
        if(spinner.getValue().equals(m_selectedBlock.getTrials().size()))
            nbTrialsConfirm_button.setEnabled(false);
        else
            nbTrialsConfirm_button.setEnabled(true);
    }//GEN-LAST:event_nbTrials_spinnerStateChanged

    /**
     * Listener called when the saveExperimentation_button is pressed.
     * @param evt 
     */
    private void saveExperimentation_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveExperimentation_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir l'emplacement de sauvegarde de l'expÃ©rience");

        FileFilter filter = new FileNameExtensionFilter("*.expe Fichiers d'expÃ©rimentation", "expe");
        fileChooser.addChoosableFileFilter(filter);
        
        File destination = new File("../Experimentations");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
        
        fileChooser.setSelectedFile(new File(Experimentation.getInstance().getName()+".expe"));
        
        int ret = fileChooser.showSaveDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
          File file = fileChooser.getSelectedFile();
            try {
                m_controller.saveExperimentation(file);
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde, vÃ©rifiez que l'emplacement sur le disque est disponible ou que le fichier remplacÃ© n'est pas protÃ©gÃ© en Ã©criture.", "Saving error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }
        }        
    }//GEN-LAST:event_saveExperimentation_buttonActionPerformed

    /**
     * Listener called when loadExperimentation_button is pressed.
     * @param evt 
     */
    private void loadExperimentation_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadExperimentation_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir l'expÃ©riementation Ã  charger");

        FileFilter filter = new FileNameExtensionFilter("*.expe - Fichiers d'experimentation", "expe");
        fileChooser.setFileFilter(filter);     
        
        File destination = new File("../Experimentations");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
        
        int ret = fileChooser.showOpenDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {                
                m_controller.loadExperimentation(file);
            }  catch ( IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors du chargement de l'expÃ©riementation. VÃ©rifiez qu'il s'agit bien d'un fichier d'expÃ©riementation. Il se peut que le fichier soit corrompu.", "Loading error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }  
        } 
    }//GEN-LAST:event_loadExperimentation_buttonActionPerformed

    /**
     * Listener called when newExperiementation_button is pressed.
     * @param evt 
     */
    private void newExperimentation_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newExperimentation_buttonActionPerformed
        m_controller.newExperimentation();
    }//GEN-LAST:event_newExperimentation_buttonActionPerformed

    /**
     * Listener called when experienceParameters_button is pressed.
     * @param evt 
     */
    private void experienceParameters_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_experienceParameters_buttonActionPerformed
        m_controller.modifyExperimentationParameters();
    }//GEN-LAST:event_experienceParameters_buttonActionPerformed

    /**
     * Listener called when supervisorMode_button is pressed. Switches to supervisor mode.
     * @param evt 
     */
    private void supervisorMode_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_supervisorMode_buttonActionPerformed
        JFrame supervisionView = new SupervisionView();
        supervisionView.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_supervisorMode_buttonActionPerformed

    /**
     * Listener called when loadBlock_button is pressed.
     * @param evt 
     */
    private void loadBlock_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadBlock_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir le bloc Ã  charger");

        FileFilter filter = new FileNameExtensionFilter("*.bloc - Fichiers de bloc", "bloc");
        fileChooser.setFileFilter(filter);
        
        File destination = new File("../Blocs");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
        
        int ret = fileChooser.showOpenDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {                
                m_controller.loadBlock(file);
            }  catch ( IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors du chargement du bloc. VÃ©rifiez qu'il s'agit bien d'un fichier de bloc. Il se peut que le fichier soit corrompu.", "Loading error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }  
        }          
    }//GEN-LAST:event_loadBlock_buttonActionPerformed

    /**
     * Listener called when deleteBlock_button is pressed.
     * @param evt 
     */
    private void deleteBlock_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBlock_buttonActionPerformed
        m_controller.deleteBlock(m_selectedBlock);
    }//GEN-LAST:event_deleteBlock_buttonActionPerformed

    /**
     * Listener called when nbTrialsCOnfirm_button is pressed.
     * @param evt 
     */
    private void nbTrialsConfirm_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nbTrialsConfirm_buttonActionPerformed
        
        m_controller.setBlockTrialsNumber((int)nbTrials_spinner.getValue(), m_selectedBlock);
        nbTrialsConfirm_button.setEnabled(false);
    }//GEN-LAST:event_nbTrialsConfirm_buttonActionPerformed

    /**
     * Listener called when practice_checkBox is checked.
     * @param evt 
     */
    private void practice_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_practice_checkBoxActionPerformed
        m_controller.setPractice(practice_checkBox.isSelected(), m_selectedBlock);
        retroaction_checkBox.setEnabled(practice_checkBox.isSelected());        
    }//GEN-LAST:event_practice_checkBoxActionPerformed

    /**
     * Listener called when visualDistractor_checkBox is checked.
     * @param evt 
     */
    private void visualDistractor_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visualDistractor_checkBoxActionPerformed
        m_controller.setVisualDistractor(visualDistractor_checkBox.isSelected(),m_selectedBlock);
        nbTrialsConfirm_button.setEnabled(false);
    }//GEN-LAST:event_visualDistractor_checkBoxActionPerformed

    /**
     * Listener called when duplicationBlock_button is pressed.
     * @param evt 
     */
    private void duplicateBlock_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicateBlock_buttonActionPerformed
        m_controller.duplicateBlock(m_selectedBlock);
    }//GEN-LAST:event_duplicateBlock_buttonActionPerformed

    /**
     * Listener called when retroaction_checkBox is checked.
     * @param evt 
     */
    private void retroaction_checkBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retroaction_checkBoxActionPerformed
        m_controller.setRetroaction(retroaction_checkBox.isSelected(), m_selectedBlock);
    }//GEN-LAST:event_retroaction_checkBoxActionPerformed

    /**
     * newExperimentation_button is doubled clicked.
     * @param evt 
     */
    private void doubleclick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_doubleclick
        if (evt.getClickCount() == 2) {
            String s = (String)JOptionPane.showInputDialog(
                    this,
                    "",
                    "Nom du bloc",
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    null,
                    m_selectedBlock.getName());

            //If a string was returned, say so.
            if ((s != null) && (s.length() > 0)) {
                m_selectedBlock.setName(s);
            }
        }
    }//GEN-LAST:event_doubleclick

    /**
     * Changes in blockName_textField
     * @param evt 
     */
    private void blockName_textFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_blockName_textFieldKeyReleased
         m_controller.setBlockName(m_selectedBlock, blockName_textField.getText());
    
    }//GEN-LAST:event_blockName_textFieldKeyReleased

    /**
     * Listener called when trialWords_comboBox is checked.
     * @param evt 
     */
    private void trialWords_comboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trialWords_comboBoxActionPerformed
       m_controller.setTrialFile(m_selectedTrial, (String)trialWords_comboBox.getSelectedItem());
    }//GEN-LAST:event_trialWords_comboBoxActionPerformed
    
    /**
     * Listener called when a block button is clicked.
     * @param evt 
     */
    private void selectBlock_buttonActionPerformed(ActionEvent evt) {
        JToggleButton callingButton = (JToggleButton)evt.getSource();
        //We need to unselect the block
        if(!callingButton.isSelected()){
            m_selectedBlock = EMPTY_BLOCK;
            m_selectedTrial = EMPTY_TRIAL;     
        }
        //We need to select the block
        else{
            //An other block was already selected
            if(m_selectedBlock != EMPTY_BLOCK){
                //Unselect it
                m_currentBlocks.get(m_selectedBlock).setSelected(false);
            }
            //Select the new one   
            m_selectedBlock = m_currentBlocks.inverse().get((JToggleButton)evt.getSource());
        }
        updateCurrentTrials();
        updateBlockPanel();
    }
    
    /**
     * Listener called when a trial button is clicked.
     * @param evt 
     */
    private void selectTrial_buttonActionPerformed(ActionEvent evt) {
        JToggleButton callingButton = (JToggleButton)evt.getSource();
        //We need to unselect the trial
        if(!callingButton.isSelected()){
            m_selectedTrial = EMPTY_TRIAL;
        }
        //We need to select the block
        else{
            //An other trial was already selected
            if(m_selectedTrial != EMPTY_TRIAL){
                //Unselect it
                m_currentTrials.get(m_selectedTrial).setSelected(false);
            }
            //Select the new one   
            m_selectedTrial = m_currentTrials.inverse().get((JToggleButton)evt.getSource());
        }
        updateTrialWordsPanel();
    }
    
    @Override    
    /**
     * Function called with the observed object of the view are changed and notify
     * their observers.
     */
    public void update(Observable observableObject, Object objectChanged) {
        //Change in the Experimentation
        if(observableObject.equals(Experimentation.getInstance())){
            //The Experimentation itself changed
            if(objectChanged.equals(LeclabEvent.EXPERIMENTATION_CLEARED) 
                    || (objectChanged.equals(LeclabEvent.EXPERIMENTATION_LOADED))){
                //unselect block and trial
                m_selectedBlock = EMPTY_BLOCK;
                m_selectedTrial = EMPTY_TRIAL;
                //Blocks have been modified                
                //Update the blocks panel to show modifications
                updateBlocksPanel();
                //Trials of the selected block have been modified
                //Update the trials panel to show modifications
                updateTrialsPanel();
            }
            //Change in the Blocks of the Experimentation
            else if(objectChanged.equals(LeclabEvent.BLOCK_ADDED)
                    || objectChanged.equals(LeclabEvent.BLOCK_REMOVED)){
                //Blocks have been modified
                //Update the blocks panel to show modifications
                updateBlocksPanel();
                updateBlockPanel();
            }
            //A Parameter has been added or remove
            else if(objectChanged.equals(LeclabEvent.PARAMETER_ADDED)
                    || objectChanged.equals(LeclabEvent.PARAMETER_REMOVED)){
                updateBlockPanel();
            }
        }
        //Change in trials of the currently selected block
        else if(observableObject.equals(m_selectedBlock)){
            //Name of the block changed
            if(objectChanged.equals(LeclabEvent.BLOCK_NAME_CHANGED)){
                updateBlocksPanel();
            }
            else{
                updateBlockParametersPanel();
                if(objectChanged.equals(LeclabEvent.TRIAL_REMOVED)
                        || objectChanged.equals(LeclabEvent.TRIAL_ADDED)){
                    //Trials of the selected block have been modified
                    //Update the trials panel to show modifications
                    updateTrialsPanel();
                    nbTrials_spinner.setValue(m_selectedBlock.getTrials().size());
                }
            }
        }
        //Change in a trial
        else if(observableObject.getClass() == Trial.class){
            //If a trials name have change
            if(isInstance(objectChanged, ArrayList.class.getName())){
                 updateTrialWordsPanel();
                 updateCurrentTrials();
                 updateTrialsPanel();
            }
            //Change in a trial of the presently selected block
            else if(m_currentTrials.containsKey((Trial)observableObject)){
                //The changed Trial is the one selected
                updateCurrentTrials();
                updateTrialsPanel();                
                updateTrialButton((Trial)observableObject);
                if(m_selectedTrial == (Trial)observableObject){                    
                    updateTrialWordsPanel();
                }
            }           
        }       
    }
    
    /**
     * Keep up to date m_currentBlocks with the model state
     */
    private void updateCurrentBlocks(){
        //Verify if blocks have been added
        for(Block block: Experimentation.getInstance().getBlocks()){
            //If the block is not in m_currentBlocks
            if(!m_currentBlocks.containsKey(block)){
                //Create and add a new block button
                m_currentBlocks.put(block, createNewBlockButton(block));
                //Observe this new block
                block.addObserver(this);
            }
        }    
        //Vefiry if blocks have been deleted
        ArrayList<Block> blocksToDelete= new ArrayList<>();
        for(Block currentBlock: m_currentBlocks.keySet()){
            //If the block for m_currentBlocks is not in the experiementation
            if(!Experimentation.getInstance().getBlocks().contains(currentBlock)){
                //Remove it from m_currentBlocks
                blocksToDelete.add(currentBlock);
            }
        }
        //Remove them
        for(Block blockToDelete: blocksToDelete){
            m_currentBlocks.remove(blockToDelete);
        }
        //If the currently selected block is deleted
        if(blocksToDelete.contains(m_selectedBlock)){
            m_selectedBlock = EMPTY_BLOCK;
            m_selectedTrial = EMPTY_TRIAL;
            updateCurrentTrials();
        }
     }
    
    /**
     * Keep up to date m_currentTrials with the model state
     */
    private void updateCurrentTrials(){

        //Verify if trials have been added
        for(Trial trial: m_selectedBlock.getTrials()){
            //If the trial is not in m_currentTrials
            if(!m_currentTrials.containsKey(trial)){
                //Create and add a new block button
                m_currentTrials.put(trial,createNewTrialButton(trial));                
                //Observe this new trial
                trial.addObserver(this);
            }
        }    
        //Vefiry if trials have been deleted
        ArrayList<Trial> trialsToDelete = new ArrayList<>();
        for(Trial currentTrial: m_currentTrials.keySet()){
            //If the trial for m_currentTrials is not in the currently selected block anymore
            if(!m_selectedBlock.getTrials().contains(currentTrial)){
                //Remove it from m_currentBlocks
                trialsToDelete.add(currentTrial);
            }
        }
        for(Trial trial: trialsToDelete){
            if(m_selectedTrial.equals(trial)){
                m_selectedTrial = EMPTY_TRIAL;
                updateTrialWordsPanel();
            }
            m_currentTrials.remove(trial);
        }
    }
    
    /**
     * Update blocks_panel to reflect the current state of the experimentation
     * based on m_currentBlocks.
     */
    public void updateBlocksPanel(){
        updateCurrentBlocks();
        //Deleting and removing button if it's not in the m_currentBlocks anymore
        for(JToggleButton blockButton: (ArrayList<JToggleButton>)getJToggleButtonsFromPanel(blocks_panel)){
            //If the button in the panel is not in m_currentBlocks, remove it            
            if(!m_currentBlocks.containsValue(blockButton)){
                blocks_panel.remove(blockButton);
            }
         }
        //Adding missing buttons to the panel
        for(Block block: Experimentation.getInstance().getBlocks()){
            JToggleButton blockButton = m_currentBlocks.get(block);
            //If the blockButton is not already in the pannel
            if(!new ArrayList<>(Arrays.asList(blocks_panel.getComponents())).contains(blockButton)){
                blocks_panel.add(blockButton);
            }            
        }
        //Update names
        for(Block block: Experimentation.getInstance().getBlocks()){
            m_currentBlocks.get(block).setText(block.getName());
        }
      
        //Refresh the panel layout
        blocks_panel.revalidate();
        blocks_panel.repaint();
    }

     /**
     * Update trials_panel to reflect the current state of the selected block
     * based on m_currentTrials.
     */
    public void updateTrialsPanel(){
                
        updateCurrentTrials();
        //Deleting and removing button if it's not in the m_currentTrials anymore
        for(JToggleButton trialButton: (ArrayList<JToggleButton>)getJToggleButtonsFromPanel(trials_panel)){
            //If the button in the panel is not in m_currentBlocks, remove it
            if(!m_currentTrials.values().contains(trialButton)){
                trials_panel.remove(trialButton);
            }
        }
        //Adding missing buttons to the panel
        for(Trial trial: m_selectedBlock.getTrials()){
            JToggleButton trialButton = m_currentTrials.get(trial);
            //If the trialButton is not already in the pannel
            if(!new ArrayList<>(Arrays.asList(trials_panel.getComponents())).contains(trialButton)){
                trials_panel.add(trialButton);
            }            
        }
        //Refresh the panel layout
        trials_panel.revalidate();
        trials_panel.repaint();
    }
    
    /**
     * Update trials_panel to reflect the current state of the selected trial.
     */
    private void updateTrialWordsPanel() {

        //If no trial is selected
        if(m_selectedTrial == EMPTY_TRIAL){
            trialWords_scrollPane.setEnabled(false);
            trialWords_comboBox.setEnabled(false);
            ArrayList<String> empty = new ArrayList<>();
            trialWords_comboBox.setModel(new DefaultComboBoxModel(empty.toArray()));
        }
        else{
            trialWords_scrollPane.setEnabled(true);
            trialWords_comboBox.setEnabled(true);
            ArrayList<String> possibleFilenames = FolderReader.getFilenamesWithWordCount(Global.VIDEO_FOLDER_PATH,  
                Global.SUPPORTED_VIDEO_FORMAT,
                Experimentation.getInstance().getWordsPerTrial());
            trialWords_comboBox.setModel(new DefaultComboBoxModel(possibleFilenames.toArray()));           
            
            trialWords_comboBox.setSelectedItem(m_selectedTrial.getVideoFile().getName());
        }
    }

    /**
     * Update the trial button linked to the trial passed as parameter.
     * @param trial 
     */
    private void updateTrialButton(Trial trial) {
        m_currentTrials.get(trial).setText(getFormatedTrialWords(trial));
    }
    
    /**
     * Returns all JToggleButton contained in a specific panel.
     * @param panel
     * @return the JToggleButtons contained in the panel
     */
    private ArrayList<JToggleButton> getJToggleButtonsFromPanel(JPanel panel){
        ArrayList<JToggleButton> buttons = new ArrayList<>();
        for(Component component: panel.getComponents()){
            if(isInstance(component, JToggleButton.class.getName())){
                buttons.add((JToggleButton)component);
            }
        }
        return buttons;
    }
    
    /**
     * Tells if an object is an instance of a specified class.
     * @param object
     * @param className
     * @return 
     */
    private boolean isInstance(Object object, String className) {
        try {
            Class clazz = Class.forName(className);
            return clazz.isInstance(object);
        } catch (ClassNotFoundException ex) {
            return false;
        }
    }
    
    /**
     * Create and format a new blockButton based on the specified block
     * @param block
     *          block to based on
     * @return the blockButton
     */
    private JToggleButton createNewBlockButton(Block block) {

        String buttonLabel = "<html>" + block.getName() + "</html>";
        JToggleButton blockButton = new JToggleButton(buttonLabel);
        blockButton.setMargin(new Insets(10,10,10,10));
        blockButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBlock_buttonActionPerformed(evt);
            }
        });
        blockButton.setPreferredSize(new Dimension(120,50));
        return blockButton;
    }
    
    /**
     * Create and format a new trialButton based on the specified trial
     * @param trial
     *         trial to based on 
     * @return the blockButton
     */
    private JToggleButton createNewTrialButton(Trial trial) {
        String trialName = getFormatedTrialWords(trial);
        //trialName = trialName.substring(0,trialName.lastIndexOf('.'));
        JToggleButton trialButton = new JToggleButton("<html>"+trialName+"</html>");
        trialButton.setMargin(new Insets(10,5,10,5));
        trialButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectTrial_buttonActionPerformed(evt);
            }
        });
        trialButton.setPreferredSize(new Dimension(200,40));
        return trialButton;
    }
    
    /**
     * Return formated String based on specified trial's words
     * @param trial
     *          tirals to get words from
     * @return 
     */
    private String getFormatedTrialWords(Trial trial) {
        String formatedWords = "";
        for(String word: trial.getWords()){
            formatedWords += word +" ";
        }
        return formatedWords;
    }
    
    /**
     * Update block panel and everything in it
     */
    private void updateBlockPanel() {
       updateBlockParametersPanel();   
       updateTrialsPanel();
    }    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToolBar.Separator actionCommand_separator;
    private javax.swing.JButton addBlock_button;
    private javax.swing.JPanel blocParameters_panel;
    private javax.swing.JLabel blockName_label;
    private javax.swing.JTextField blockName_textField;
    private javax.swing.JPanel block_panel;
    private javax.swing.JPanel blocks_panel;
    private javax.swing.JScrollPane blocks_scrollPane;
    private javax.swing.JToolBar.Separator commandParameters_separator;
    private javax.swing.JButton deleteBlock_button;
    private javax.swing.JButton duplicateBlock_button;
    private javax.swing.JButton experienceParameters_button;
    private javax.swing.JPanel experience_panel;
    private javax.swing.JScrollPane experience_scrollPane;
    private javax.swing.JToolBar experience_toolBar;
    private javax.swing.JMenuBar experimentationMenu_menuBar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton loadBlock_button;
    private javax.swing.JButton loadExperimentation_button;
    private javax.swing.JButton nbTrialsConfirm_button;
    private javax.swing.JLabel nbTrials_label;
    private javax.swing.JSpinner nbTrials_spinner;
    private javax.swing.JButton newExperimentation_button;
    private javax.swing.JCheckBox noise_checkBox;
    private javax.swing.JCheckBox practice_checkBox;
    private javax.swing.JButton redo_button;
    private javax.swing.JCheckBox retroaction_checkBox;
    private javax.swing.JButton saveBlock_button;
    private javax.swing.JButton saveExperimentation_button;
    private javax.swing.JButton supervisorMode_button;
    private javax.swing.JCheckBox tactileDistractor_checkBox;
    private javax.swing.JComboBox trialWords_comboBox;
    private javax.swing.JPanel trialWords_panel;
    private javax.swing.JScrollPane trialWords_scrollPane;
    private javax.swing.JPanel trials_panel;
    private javax.swing.JScrollPane trials_scrollPane;
    private javax.swing.JButton undo_button;
    private javax.swing.JCheckBox visualDistractor_checkBox;
    // End of variables declaration//GEN-END:variables

    /**
     * Update the block parameters panel
     */
    private void updateBlockParametersPanel() {
        //If no block is selected, set enables to false
        Boolean enableState = m_selectedBlock != EMPTY_BLOCK;
        
        blockName_label.setEnabled(enableState);
        blockName_textField.setEnabled(enableState);
        blockName_textField.setText(m_selectedBlock.getName());
        block_panel.setEnabled(enableState);
        trials_scrollPane.setEnabled(enableState);
        blocParameters_panel.setEnabled(enableState);
        nbTrials_label.setEnabled(enableState);
        saveBlock_button.setEnabled(enableState);
        duplicateBlock_button.setEnabled(enableState);
        deleteBlock_button.setEnabled(enableState);
        nbTrials_spinner.setEnabled(enableState);
        nbTrials_spinner.setValue(m_selectedBlock.getTrials().size());
        practice_checkBox.setEnabled(enableState);
        practice_checkBox.setSelected(m_selectedBlock.isPractice());
        
        
        retroaction_checkBox.setEnabled(m_selectedBlock.isPractice() && enableState);
        if(m_selectedBlock.isPractice() && enableState){
            retroaction_checkBox.setSelected(m_selectedBlock.hasRetroaction());
        } 
        else{
            retroaction_checkBox.setSelected(false);
        }
        
        if(Experimentation.getInstance().getPresetParameters().get(TactileDistractorParameter.class) != null){
            tactileDistractor_checkBox.setEnabled(enableState);
            tactileDistractor_checkBox.setSelected(enableState && m_selectedBlock.getParameters().get(TactileDistractorParameter.class) != null);
        }
        else{
            tactileDistractor_checkBox.setEnabled(false);
            tactileDistractor_checkBox.setSelected(false);
        }
        if(Experimentation.getInstance().getPresetParameters().get(VisualDistractorParameter.class) != null){
            visualDistractor_checkBox.setEnabled(enableState);
            visualDistractor_checkBox.setSelected(enableState && m_selectedBlock.getParameters().get(VisualDistractorParameter.class) != null);
        }
        else{
            visualDistractor_checkBox.setEnabled(false);
            visualDistractor_checkBox.setSelected(false);
        }
        if(Experimentation.getInstance().getPresetParameters().get(NoiseParameter.class) != null){
            noise_checkBox.setEnabled(enableState);
            noise_checkBox.setSelected(enableState && m_selectedBlock.getParameters().get(NoiseParameter.class) != null);
        }
        else{
            noise_checkBox.setEnabled(false);
            noise_checkBox.setSelected(false);
        }
    }

}
