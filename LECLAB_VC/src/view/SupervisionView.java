package view;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;
import contoller.SupervisionViewController;
import event.LeclabEvent;
import experiment.Block;
import experiment.Experimentation;
import experiment.Trial;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GraphicsConfiguration;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import javax.swing.Icon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.border.Border;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import layout.VerticalFlowLayout;
import parameters.EParameterPosition;
import static parameters.EParameterPosition.AFTER;
import static parameters.EParameterPosition.BEFORE;
import parameters.Parameter;
import parameters.TactileDistractorParameter;
import parameters.VisualDistractorParameter;
import parameters.geometry.AbstractShape;
import parameters.geometry.Circle;
import parameters.geometry.Rectangle;
import sitting.BlockResult;
import sitting.SittingManager;
import sitting.SittingState;
import static sitting.SittingState.START_OF_BLOCK;
import sitting.TrialResult;
import sitting.WordResult;
import statistics.AStat;
import utility.Pair;
import view.icons.ShapeListIcon;

/**
 *
 * @author Jean-Étienne Salois, Philippe de Sève
 */
public class SupervisionView extends javax.swing.JFrame implements Observer {
    /**
     * Controller
     */
    private SupervisionViewController m_controller;
    
    /**
     * HasMap linking every block of the experimentation the is not a practice 
     * block to his jToggleButton.
     */
    private BiMap<Block, javax.swing.JToggleButton> m_blockButtons;
    
    /**
     * HasMap linking every practice block of the experimentation to his jToggleButton
     */
    private BiMap<Block, javax.swing.JToggleButton> m_practiceButtons;
    
    /**
     * View for subject interaction
     */
    private SubjectView m_subjectView;
    
    /**
     * Creates new form SupervisionView
     */
    public SupervisionView() {
        m_blockButtons = HashBiMap.create();
        m_practiceButtons =HashBiMap.create();
        m_controller = new SupervisionViewController(this);
        initComponents();
        m_controller.initializeExperiment();
        this.setExtendedState( this.getExtendedState()|JFrame.MAXIMIZED_BOTH );
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gs = ge.getScreenDevices();
        GraphicsDevice gd;
        if(gs.length > 1)
        {
           gd = gs[1];
        }
        else{
           gd = gs[0];
        }
        GraphicsConfiguration gc = gd.getDefaultConfiguration();
        m_subjectView = new SubjectView(gc, m_controller.getSittingManager());
        m_subjectView.setVisible(true);
        m_controller.getSittingManager().addObserver(this);
        if(Experimentation.getInstance().getRealBlocks().size()==0){
            start_button.setEnabled(false);
        }
        pause_button.setVisible(false);
        restartCurrentBlock_button.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        experience_toolBar = new javax.swing.JToolBar();
        saveExperience_button = new javax.swing.JButton();
        loadExperience_button = new javax.swing.JButton();
        newExperience_button = new javax.swing.JButton();
        actionCommand_separator = new javax.swing.JToolBar.Separator();
        undo_button = new javax.swing.JButton();
        redo_button = new javax.swing.JButton();
        commandParameters_separator = new javax.swing.JToolBar.Separator();
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));
        designerMode_button = new javax.swing.JButton();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(5, 0), new java.awt.Dimension(5, 0), new java.awt.Dimension(10, 32767));
        subject_label = new javax.swing.JLabel();
        subject_textField = new javax.swing.JTextField();
        practice_scrollPane = new javax.swing.JScrollPane();
        practice_panel = new javax.swing.JPanel();
        blocks_scrollPane = new javax.swing.JScrollPane();
        blocks_panel = new javax.swing.JPanel();
        currentBlock_panel = new javax.swing.JPanel();
        leftBlockSub_panel = new javax.swing.JPanel();
        notes_panel = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        notes_textPane = new javax.swing.JTextPane();
        statistics_panel = new javax.swing.JPanel();
        wordsStatsLabel_label = new javax.swing.JLabel();
        distractorStatsLabel_label = new javax.swing.JLabel();
        avRespTimeLabel_label = new javax.swing.JLabel();
        wordStats_label = new javax.swing.JLabel();
        distractorStats_label = new javax.swing.JLabel();
        avRespTime_label = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        distractor_panel = new javax.swing.JPanel();
        distTypeLabel_label = new javax.swing.JLabel();
        distType_label = new javax.swing.JLabel();
        distractorDescription_panel = new javax.swing.JPanel();
        rightBlockSub_panel = new javax.swing.JPanel();
        currentTrial_panel = new javax.swing.JPanel();
        currentWords_label = new javax.swing.JLabel();
        currentDistractor_label = new javax.swing.JLabel();
        currentWords_panel = new javax.swing.JPanel();
        currentDistractor_panel = new javax.swing.JPanel();
        lastTrial_panel = new javax.swing.JPanel();
        lastRealWords_label = new javax.swing.JLabel();
        lastRealDistractor_label = new javax.swing.JLabel();
        wordsAnswer_label = new javax.swing.JLabel();
        wordsResponseTimeLabel_label = new javax.swing.JLabel();
        distractorAnswer_label = new javax.swing.JLabel();
        distractorResponseTimeLabel_label = new javax.swing.JLabel();
        totalResponseTimeLabel_label = new javax.swing.JLabel();
        lastWords_panel = new javax.swing.JPanel();
        lastRealWords_panel = new javax.swing.JPanel();
        WordsResponse_panel = new javax.swing.JPanel();
        lastDistractor_panel = new javax.swing.JPanel();
        lastRealDistractor_panel = new javax.swing.JPanel();
        distractorResponse_panel = new javax.swing.JPanel();
        wordsResponseTime_label = new javax.swing.JLabel();
        distractorResponseTime_label = new javax.swing.JLabel();
        totalResponseTime_label = new javax.swing.JLabel();
        nextTrial_panel = new javax.swing.JPanel();
        nextWords_label = new javax.swing.JLabel();
        nextDistractor_label = new javax.swing.JLabel();
        nextWords_panel = new javax.swing.JPanel();
        nextDistractor_panel = new javax.swing.JPanel();
        controls_panel = new javax.swing.JPanel();
        restartCurrentBlock_button = new javax.swing.JButton();
        pause_button = new javax.swing.JButton();
        start_button = new javax.swing.JButton();
        currentTrialNumber_panel = new javax.swing.JPanel();
        currentTrialSlash_label = new javax.swing.JLabel();
        currentTrialNumber_label = new javax.swing.JLabel();
        totalTrialsNumber_label = new javax.swing.JLabel();
        trialsTitle_label = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Module Superviseur");

        jPanel1.setPreferredSize(new java.awt.Dimension(200, 100));

        experience_toolBar.setRollover(true);

        saveExperience_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/save_icon&32.png"))); // NOI18N
        saveExperience_button.setText("Sauvegarder");
        saveExperience_button.setFocusable(false);
        saveExperience_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        saveExperience_button.setMaximumSize(new java.awt.Dimension(120, 50));
        saveExperience_button.setMinimumSize(new java.awt.Dimension(120, 50));
        saveExperience_button.setPreferredSize(new java.awt.Dimension(120, 50));
        saveExperience_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveExperience_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(saveExperience_button);

        loadExperience_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/folder_open_icon&32.png"))); // NOI18N
        loadExperience_button.setText("Charger");
        loadExperience_button.setFocusable(false);
        loadExperience_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loadExperience_button.setMaximumSize(new java.awt.Dimension(96, 50));
        loadExperience_button.setMinimumSize(new java.awt.Dimension(96, 50));
        loadExperience_button.setPreferredSize(new java.awt.Dimension(96, 50));
        loadExperience_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadExperience_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(loadExperience_button);

        newExperience_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/doc_plus_icon&32.png"))); // NOI18N
        newExperience_button.setText("Nouveau");
        newExperience_button.setFocusable(false);
        newExperience_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        newExperience_button.setMaximumSize(new java.awt.Dimension(100, 50));
        newExperience_button.setMinimumSize(new java.awt.Dimension(100, 50));
        newExperience_button.setPreferredSize(new java.awt.Dimension(100, 50));
        experience_toolBar.add(newExperience_button);
        experience_toolBar.add(actionCommand_separator);

        undo_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/undo_icon&32.png"))); // NOI18N
        undo_button.setText("Annuler");
        undo_button.setFocusable(false);
        undo_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        undo_button.setMaximumSize(new java.awt.Dimension(94, 50));
        undo_button.setMinimumSize(new java.awt.Dimension(94, 50));
        undo_button.setPreferredSize(new java.awt.Dimension(94, 50));
        experience_toolBar.add(undo_button);
        undo_button.setVisible(false);

        redo_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/redo_icon&32.png"))); // NOI18N
        redo_button.setText("Rétablir");
        redo_button.setFocusable(false);
        redo_button.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        redo_button.setMaximumSize(new java.awt.Dimension(94, 50));
        redo_button.setMinimumSize(new java.awt.Dimension(94, 50));
        redo_button.setPreferredSize(new java.awt.Dimension(94, 50));
        experience_toolBar.add(redo_button);
        redo_button.setVisible(false);
        experience_toolBar.add(commandParameters_separator);
        commandParameters_separator.setVisible(false);
        experience_toolBar.add(filler2);

        designerMode_button.setText("Mode Designer");
        designerMode_button.setMaximumSize(new java.awt.Dimension(120, 48));
        designerMode_button.setMinimumSize(new java.awt.Dimension(120, 48));
        designerMode_button.setName(""); // NOI18N
        designerMode_button.setPreferredSize(new java.awt.Dimension(120, 48));
        designerMode_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                designerMode_buttonActionPerformed(evt);
            }
        });
        experience_toolBar.add(designerMode_button);
        experience_toolBar.add(filler1);

        subject_label.setText("Sujet:");

        subject_textField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subject_textFieldActionPerformed(evt);
            }
        });

        practice_scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Pratiques"));
        practice_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        javax.swing.GroupLayout practice_panelLayout = new javax.swing.GroupLayout(practice_panel);
        practice_panel.setLayout(practice_panelLayout);
        practice_panelLayout.setHorizontalGroup(
            practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );
        practice_panelLayout.setVerticalGroup(
            practice_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 113, Short.MAX_VALUE)
        );

        practice_scrollPane.setViewportView(practice_panel);
        practice_panel.setLayout(new VerticalFlowLayout(4, 10, 10));

        blocks_scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Blocs"));
        blocks_scrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        blocks_panel.setPreferredSize(new java.awt.Dimension(5, 5));

        javax.swing.GroupLayout blocks_panelLayout = new javax.swing.GroupLayout(blocks_panel);
        blocks_panel.setLayout(blocks_panelLayout);
        blocks_panelLayout.setHorizontalGroup(
            blocks_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );
        blocks_panelLayout.setVerticalGroup(
            blocks_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 356, Short.MAX_VALUE)
        );

        blocks_scrollPane.setViewportView(blocks_panel);
        blocks_panel.setLayout(new VerticalFlowLayout(4, 10, 10));

        currentBlock_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Bloc en cours"));
        currentBlock_panel.setLayout(new java.awt.GridLayout(1, 0));

        notes_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Notes"));
        notes_panel.setMaximumSize(new java.awt.Dimension(35, 87));
        notes_panel.setMinimumSize(new java.awt.Dimension(35, 87));

        notes_textPane.setMaximumSize(new java.awt.Dimension(35, 87));
        notes_textPane.setPreferredSize(new java.awt.Dimension(35, 87));
        jScrollPane4.setViewportView(notes_textPane);

        javax.swing.GroupLayout notes_panelLayout = new javax.swing.GroupLayout(notes_panel);
        notes_panel.setLayout(notes_panelLayout);
        notes_panelLayout.setHorizontalGroup(
            notes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4)
        );
        notes_panelLayout.setVerticalGroup(
            notes_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
        );

        statistics_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Statistiques"));

        wordsStatsLabel_label.setText("Mots:");

        distractorStatsLabel_label.setText("Distracteur:");

        avRespTimeLabel_label.setText("Temps réponse moyen:");

        javax.swing.GroupLayout statistics_panelLayout = new javax.swing.GroupLayout(statistics_panel);
        statistics_panel.setLayout(statistics_panelLayout);
        statistics_panelLayout.setHorizontalGroup(
            statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statistics_panelLayout.createSequentialGroup()
                .addGroup(statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statistics_panelLayout.createSequentialGroup()
                        .addComponent(wordsStatsLabel_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(wordStats_label))
                    .addGroup(statistics_panelLayout.createSequentialGroup()
                        .addComponent(distractorStatsLabel_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distractorStats_label))
                    .addGroup(statistics_panelLayout.createSequentialGroup()
                        .addComponent(avRespTimeLabel_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(avRespTime_label)))
                .addGap(0, 143, Short.MAX_VALUE))
        );
        statistics_panelLayout.setVerticalGroup(
            statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statistics_panelLayout.createSequentialGroup()
                .addGroup(statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordsStatsLabel_label)
                    .addComponent(wordStats_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distractorStatsLabel_label)
                    .addComponent(distractorStats_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statistics_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(avRespTimeLabel_label)
                    .addComponent(avRespTime_label)))
        );

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder("Distracteur"));
        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setPreferredSize(new java.awt.Dimension(50, 100));

        distractor_panel.setPreferredSize(new java.awt.Dimension(30, 30));

        distTypeLabel_label.setText("Type:");

        distractorDescription_panel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        javax.swing.GroupLayout distractor_panelLayout = new javax.swing.GroupLayout(distractor_panel);
        distractor_panel.setLayout(distractor_panelLayout);
        distractor_panelLayout.setHorizontalGroup(
            distractor_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distractor_panelLayout.createSequentialGroup()
                .addComponent(distTypeLabel_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distType_label)
                .addContainerGap(227, Short.MAX_VALUE))
            .addComponent(distractorDescription_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        distractor_panelLayout.setVerticalGroup(
            distractor_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(distractor_panelLayout.createSequentialGroup()
                .addGroup(distractor_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(distTypeLabel_label)
                    .addComponent(distType_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(distractorDescription_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 118, Short.MAX_VALUE))
        );

        jScrollPane5.setViewportView(distractor_panel);

        javax.swing.GroupLayout leftBlockSub_panelLayout = new javax.swing.GroupLayout(leftBlockSub_panel);
        leftBlockSub_panel.setLayout(leftBlockSub_panelLayout);
        leftBlockSub_panelLayout.setHorizontalGroup(
            leftBlockSub_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statistics_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(notes_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        leftBlockSub_panelLayout.setVerticalGroup(
            leftBlockSub_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftBlockSub_panelLayout.createSequentialGroup()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statistics_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(notes_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        currentBlock_panel.add(leftBlockSub_panel);

        currentTrial_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Essai Courrant"));

        currentWords_label.setText("Mots présentés:");

        currentDistractor_label.setText("Distracteur:");

        javax.swing.GroupLayout currentTrial_panelLayout = new javax.swing.GroupLayout(currentTrial_panel);
        currentTrial_panel.setLayout(currentTrial_panelLayout);
        currentTrial_panelLayout.setHorizontalGroup(
            currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentTrial_panelLayout.createSequentialGroup()
                .addGroup(currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(currentWords_label)
                    .addComponent(currentDistractor_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(currentDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(currentWords_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
        );
        currentTrial_panelLayout.setVerticalGroup(
            currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentTrial_panelLayout.createSequentialGroup()
                .addGroup(currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(currentTrial_panelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(currentWords_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(currentTrial_panelLayout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(currentWords_label)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(currentTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, currentTrial_panelLayout.createSequentialGroup()
                        .addComponent(currentDistractor_label)
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addComponent(currentDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        lastTrial_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Essai Précédant"));

        lastRealWords_label.setText("Mots présentés:");

        lastRealDistractor_label.setText("Distracteur:");

        wordsAnswer_label.setText("Réponse:");

        wordsResponseTimeLabel_label.setText("Temps de réponse:");

        distractorAnswer_label.setText("Réponse:");

        distractorResponseTimeLabel_label.setText("Temps de réponse:");

        totalResponseTimeLabel_label.setText("Temps de réponse total:");

        javax.swing.GroupLayout lastWords_panelLayout = new javax.swing.GroupLayout(lastWords_panel);
        lastWords_panel.setLayout(lastWords_panelLayout);
        lastWords_panelLayout.setHorizontalGroup(
            lastWords_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lastRealWords_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(WordsResponse_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        lastWords_panelLayout.setVerticalGroup(
            lastWords_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastWords_panelLayout.createSequentialGroup()
                .addComponent(lastRealWords_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(WordsResponse_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lastDistractor_panelLayout = new javax.swing.GroupLayout(lastDistractor_panel);
        lastDistractor_panel.setLayout(lastDistractor_panelLayout);
        lastDistractor_panelLayout.setHorizontalGroup(
            lastDistractor_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lastRealDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(distractorResponse_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        lastDistractor_panelLayout.setVerticalGroup(
            lastDistractor_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastDistractor_panelLayout.createSequentialGroup()
                .addComponent(lastRealDistractor_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(distractorResponse_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout lastTrial_panelLayout = new javax.swing.GroupLayout(lastTrial_panel);
        lastTrial_panel.setLayout(lastTrial_panelLayout);
        lastTrial_panelLayout.setHorizontalGroup(
            lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(wordsAnswer_label)
                    .addComponent(lastRealWords_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lastWords_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lastTrial_panelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(distractorAnswer_label, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lastTrial_panelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lastRealDistractor_label)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lastDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lastTrial_panelLayout.createSequentialGroup()
                        .addComponent(totalResponseTimeLabel_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalResponseTime_label))
                    .addGroup(lastTrial_panelLayout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                                .addComponent(distractorResponseTimeLabel_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(distractorResponseTime_label))
                            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                                .addComponent(wordsResponseTimeLabel_label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(wordsResponseTime_label)))))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        lastTrial_panelLayout.setVerticalGroup(
            lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lastTrial_panelLayout.createSequentialGroup()
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lastTrial_panelLayout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(lastRealWords_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(wordsAnswer_label))
                    .addComponent(lastWords_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(wordsResponseTimeLabel_label)
                    .addComponent(wordsResponseTime_label))
                .addGap(8, 8, 8)
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(lastTrial_panelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lastRealDistractor_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(distractorAnswer_label))
                    .addComponent(lastDistractor_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(distractorResponseTimeLabel_label)
                    .addComponent(distractorResponseTime_label))
                .addGap(9, 9, 9)
                .addGroup(lastTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(totalResponseTimeLabel_label)
                    .addComponent(totalResponseTime_label))
                .addGap(0, 2, Short.MAX_VALUE))
        );

        nextTrial_panel.setBorder(javax.swing.BorderFactory.createTitledBorder("Essai Suivant"));

        nextWords_label.setText("Mots présentés:");

        nextDistractor_label.setText("Distracteur:");

        javax.swing.GroupLayout nextTrial_panelLayout = new javax.swing.GroupLayout(nextTrial_panel);
        nextTrial_panel.setLayout(nextTrial_panelLayout);
        nextTrial_panelLayout.setHorizontalGroup(
            nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nextTrial_panelLayout.createSequentialGroup()
                .addGroup(nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(nextWords_label)
                    .addComponent(nextDistractor_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(nextWords_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)))
        );
        nextTrial_panelLayout.setVerticalGroup(
            nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(nextTrial_panelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextWords_label)
                    .addComponent(nextWords_panel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(nextTrial_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nextDistractor_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(nextTrial_panelLayout.createSequentialGroup()
                        .addComponent(nextDistractor_label)
                        .addGap(0, 13, Short.MAX_VALUE))))
        );

        javax.swing.GroupLayout rightBlockSub_panelLayout = new javax.swing.GroupLayout(rightBlockSub_panel);
        rightBlockSub_panel.setLayout(rightBlockSub_panelLayout);
        rightBlockSub_panelLayout.setHorizontalGroup(
            rightBlockSub_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(currentTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lastTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(nextTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        rightBlockSub_panelLayout.setVerticalGroup(
            rightBlockSub_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rightBlockSub_panelLayout.createSequentialGroup()
                .addComponent(lastTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextTrial_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        currentBlock_panel.add(rightBlockSub_panel);

        restartCurrentBlock_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/playback_reload_icon_reverted&48.png"))); // NOI18N
        restartCurrentBlock_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        restartCurrentBlock_button.setMaximumSize(new java.awt.Dimension(63, 63));
        restartCurrentBlock_button.setMinimumSize(new java.awt.Dimension(63, 63));
        restartCurrentBlock_button.setPreferredSize(new java.awt.Dimension(63, 63));

        pause_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/playback_pause_icon&48.png"))); // NOI18N
        pause_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pause_button.setMaximumSize(new java.awt.Dimension(63, 63));
        pause_button.setMinimumSize(new java.awt.Dimension(63, 63));
        pause_button.setPreferredSize(new java.awt.Dimension(63, 63));

        start_button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/view/icons/playback_play_icon&48.png"))); // NOI18N
        start_button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        start_button.setMaximumSize(new java.awt.Dimension(63, 63));
        start_button.setMinimumSize(new java.awt.Dimension(63, 63));
        start_button.setPreferredSize(new java.awt.Dimension(63, 63));
        start_button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                start_buttonActionPerformed(evt);
            }
        });

        currentTrialSlash_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        currentTrialSlash_label.setText("/");

        currentTrialNumber_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        currentTrialNumber_label.setText("0");

        totalTrialsNumber_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        totalTrialsNumber_label.setText("0");

        trialsTitle_label.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        trialsTitle_label.setText("essais");

        javax.swing.GroupLayout currentTrialNumber_panelLayout = new javax.swing.GroupLayout(currentTrialNumber_panel);
        currentTrialNumber_panel.setLayout(currentTrialNumber_panelLayout);
        currentTrialNumber_panelLayout.setHorizontalGroup(
            currentTrialNumber_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentTrialNumber_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(currentTrialNumber_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTrialSlash_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(totalTrialsNumber_label)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trialsTitle_label)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        currentTrialNumber_panelLayout.setVerticalGroup(
            currentTrialNumber_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(currentTrialNumber_panelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(currentTrialNumber_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trialsTitle_label)
                    .addGroup(currentTrialNumber_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(currentTrialSlash_label)
                        .addComponent(currentTrialNumber_label))
                    .addComponent(totalTrialsNumber_label))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout controls_panelLayout = new javax.swing.GroupLayout(controls_panel);
        controls_panel.setLayout(controls_panelLayout);
        controls_panelLayout.setHorizontalGroup(
            controls_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controls_panelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(currentTrialNumber_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(start_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pause_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(restartCurrentBlock_button, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        controls_panelLayout.setVerticalGroup(
            controls_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(restartCurrentBlock_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pause_button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(start_button, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controls_panelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(currentTrialNumber_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(experience_toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(subject_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subject_textField, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(blocks_scrollPane)
                            .addComponent(practice_scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(currentBlock_panel, javax.swing.GroupLayout.DEFAULT_SIZE, 559, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(controls_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(experience_toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(subject_label)
                    .addComponent(subject_textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(currentBlock_panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(10, 10, 10)
                        .addComponent(controls_panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(30, 30, 30))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(practice_scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(blocks_scrollPane)
                        .addContainerGap())))
        );

        jScrollPane1.setViewportView(jPanel1);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 711, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 612, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Listener called when the save button is pressed.
     * @param evt 
     */
    private void saveExperience_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveExperience_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir l'emplacement de sauvegarde de la session");

        FileFilter filter = new FileNameExtensionFilter("*.sess Fichiers de session", "sess");
        fileChooser.addChoosableFileFilter(filter);
        
        String fileName="";
        if(m_controller.getSittingManager().getName().equals("")){
            fileName = subject_textField.getText();
        }
        else{
            fileName = m_controller.getSittingManager().getName();
        }
        fileName += ".scea";
        
        File destination = new File("../Sessions");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
                
        fileChooser.setSelectedFile(new File(fileName));
        
        int ret = fileChooser.showSaveDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
          File file = fileChooser.getSelectedFile();
            try {
                m_controller.saveSession(file);
            } catch (IOException ex) {
               JOptionPane.showMessageDialog(this, "Erreur lors de la sauvegarde, vérifiez que l'emplacement sur le disque est disponible ou que le fichier remplacé n'est pas protégé en écriture.", "Saving error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }
        }  
    }//GEN-LAST:event_saveExperience_buttonActionPerformed

    /**
     * Listener called when the start button is pressed.
     * @param evt 
     */
    private void start_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_start_buttonActionPerformed
        m_controller.startBlock();
    }//GEN-LAST:event_start_buttonActionPerformed

    /**
     * Listener called when the designer mode button is pressed. Switch to designer view.
     * @param evt 
     */
    private void designerMode_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_designerMode_buttonActionPerformed
        DesignerView designerView = new DesignerView();
        designerView.setVisible(true);
        //If the model is already populated we need to update the blocks panel
        designerView.updateBlocksPanel();  
        m_subjectView.dispose();
        this.dispose();
    }//GEN-LAST:event_designerMode_buttonActionPerformed

    /**
     * Listener called when the subject textfield is modified
     * @param evt 
     */
    private void subject_textFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subject_textFieldActionPerformed
        m_controller.setSittingSubjectName(subject_textField.getText());
    }//GEN-LAST:event_subject_textFieldActionPerformed

    /**
     * Listener called when load button is pressed.
     * @param evt 
     */
    private void loadExperience_buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadExperience_buttonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Choisir la session à charger");

        FileFilter filter = new FileNameExtensionFilter("*.sess - Fichiers de session", "sess");
        fileChooser.setFileFilter(filter);
        
        File destination = new File("../Sessions");
        destination.mkdir();
        
        fileChooser.setCurrentDirectory(destination);
        
        int ret = fileChooser.showOpenDialog(null);

        if (ret == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            
            try {                
                m_controller.loadExperimentation(file);
            }  catch ( IOException | ClassNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Erreur lors du chargement de la session. Vérifiez qu'il s'agit bien d'un fichier de session. Il se peut que le fichier soit corrompu.", "Loading error", JOptionPane.INFORMATION_MESSAGE, new javax.swing.ImageIcon(getClass().getResource("/view/icons/attention_icon&48.png")));
            }  
        } 
    }//GEN-LAST:event_loadExperience_buttonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel WordsResponse_panel;
    private javax.swing.JToolBar.Separator actionCommand_separator;
    private javax.swing.JLabel avRespTimeLabel_label;
    private javax.swing.JLabel avRespTime_label;
    private javax.swing.JPanel blocks_panel;
    private javax.swing.JScrollPane blocks_scrollPane;
    private javax.swing.JToolBar.Separator commandParameters_separator;
    private javax.swing.JPanel controls_panel;
    private javax.swing.JPanel currentBlock_panel;
    private javax.swing.JLabel currentDistractor_label;
    private javax.swing.JPanel currentDistractor_panel;
    private javax.swing.JLabel currentTrialNumber_label;
    private javax.swing.JPanel currentTrialNumber_panel;
    private javax.swing.JLabel currentTrialSlash_label;
    private javax.swing.JPanel currentTrial_panel;
    private javax.swing.JLabel currentWords_label;
    private javax.swing.JPanel currentWords_panel;
    private javax.swing.JButton designerMode_button;
    private javax.swing.JLabel distTypeLabel_label;
    private javax.swing.JLabel distType_label;
    private javax.swing.JLabel distractorAnswer_label;
    private javax.swing.JPanel distractorDescription_panel;
    private javax.swing.JLabel distractorResponseTimeLabel_label;
    private javax.swing.JLabel distractorResponseTime_label;
    private javax.swing.JPanel distractorResponse_panel;
    private javax.swing.JLabel distractorStatsLabel_label;
    private javax.swing.JLabel distractorStats_label;
    private javax.swing.JPanel distractor_panel;
    private javax.swing.JToolBar experience_toolBar;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel lastDistractor_panel;
    private javax.swing.JLabel lastRealDistractor_label;
    private javax.swing.JPanel lastRealDistractor_panel;
    private javax.swing.JLabel lastRealWords_label;
    private javax.swing.JPanel lastRealWords_panel;
    private javax.swing.JPanel lastTrial_panel;
    private javax.swing.JPanel lastWords_panel;
    private javax.swing.JPanel leftBlockSub_panel;
    private javax.swing.JButton loadExperience_button;
    private javax.swing.JButton newExperience_button;
    private javax.swing.JLabel nextDistractor_label;
    private javax.swing.JPanel nextDistractor_panel;
    private javax.swing.JPanel nextTrial_panel;
    private javax.swing.JLabel nextWords_label;
    private javax.swing.JPanel nextWords_panel;
    private javax.swing.JPanel notes_panel;
    private javax.swing.JTextPane notes_textPane;
    private javax.swing.JButton pause_button;
    private javax.swing.JPanel practice_panel;
    private javax.swing.JScrollPane practice_scrollPane;
    private javax.swing.JButton redo_button;
    private javax.swing.JButton restartCurrentBlock_button;
    private javax.swing.JPanel rightBlockSub_panel;
    private javax.swing.JButton saveExperience_button;
    private javax.swing.JButton start_button;
    private javax.swing.JPanel statistics_panel;
    private javax.swing.JLabel subject_label;
    private javax.swing.JTextField subject_textField;
    private javax.swing.JLabel totalResponseTimeLabel_label;
    private javax.swing.JLabel totalResponseTime_label;
    private javax.swing.JLabel totalTrialsNumber_label;
    private javax.swing.JLabel trialsTitle_label;
    private javax.swing.JButton undo_button;
    private javax.swing.JLabel wordStats_label;
    private javax.swing.JLabel wordsAnswer_label;
    private javax.swing.JLabel wordsResponseTimeLabel_label;
    private javax.swing.JLabel wordsResponseTime_label;
    private javax.swing.JLabel wordsStatsLabel_label;
    // End of variables declaration//GEN-END:variables
    
    /**
     * Listener called when a block button is pressed.
     * @param evt 
     */
    private void selectBlock_buttonActionPerformed(ActionEvent evt){
        JToggleButton blockButton = (JToggleButton)evt.getSource();
        blockButton.setSelected(!blockButton.isSelected());
    }
    
    /**
     * Update block order panel
     */
    private void updateBlockOrderPanel(){
        for(Pair<Integer, Integer[]> block: m_controller.getSittingManager().getExperimentOrder()){
            Block currentBlock = Experimentation.getInstance().getRealBlocks().get(block.x);
            JToggleButton blockButton = new JToggleButton(currentBlock.getName());
            blockButton.setPreferredSize(new Dimension(80,40));
            blockButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectBlock_buttonActionPerformed(evt);
            }

            });
            blocks_panel.add(blockButton);
            m_blockButtons.put(currentBlock, blockButton);
        }
        blocks_panel.revalidate();
        blocks_panel.repaint();
    }
    
    /**
     * Update practice order panel
     */
    private void updatePraticeOrderPanel(){
        for(Block currentBlock: Experimentation.getInstance().getPracticeBlocks()){            
            JToggleButton practiceButton = new JToggleButton(currentBlock.getName());
            practiceButton.setPreferredSize(new Dimension(80,40));
            practiceButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    selectPractice_buttonActionPerformed(evt);
                }            
            });
            practice_panel.add(practiceButton);   
            m_practiceButtons.put(currentBlock, practiceButton);
        }
        blocks_panel.revalidate();
        blocks_panel.repaint();
    }
    
    /**
     * Refresh the total number of trials in this block showed at the bottom.
     */
    private void updateCurrentBlockInfo(){
        totalTrialsNumber_label.setText(Integer.toString(Experimentation.getInstance().getBlocks().
                get(m_controller.getSittingManager().getBlockId(m_controller.getSittingManager().getCurrentBlock())).getTrials().size()));
    }
    
    /**
     * Refresh current trial number showed at the bottom.
     */
    private void updateCurrentTrial(){
        currentTrialNumber_label.setText(Integer.toString(m_controller.getSittingManager().getCurrentTrial() + 1));
    }
    
    /**
     * Function called when the observable objects observed by this observer are
     * notifying a change.
     * @param o
     * @param arg 
     */
    @Override
    public void update(Observable o, Object arg) {
        if(o.equals(m_controller.getSittingManager())){
            switch ((LeclabEvent)arg){
                case SITTING_STATE_CHANGED:
                    
                    switch (m_controller.getSittingManager().getState()){
                        case START_OF_BLOCK:
                            System.out.println("START_OF_BLOCK");
                            updateDistractorDescriptionPanel();
                            updateCurrentBlockInfo();
                            updateTrialsPanel();
                            changeCurrentBlock();
                            for(JToggleButton practiceButton: m_practiceButtons.values()){
                                practiceButton.setEnabled(false);
                            }
                            break;
                        case START_OF_PRACTICE:
                            System.out.println("START_OF_PRACTICE");
                            for(JToggleButton practiceButton: m_practiceButtons.values()){
                                practiceButton.setEnabled(false);
                            }
                            break;
                        case PLAYING_TRIAL_VIDEO:
                            System.out.println("PLAYING_TRIAL_VIDEO");
                            break;
                        case END_OF_SITTING:
                            System.out.println("END_OF_SITTING");
                            changeCurrentBlock();
                            for(JToggleButton practiceButton: m_practiceButtons.values()){
                                practiceButton.setEnabled(true);
                            }
                           break;
                        case PLAYING_TACTILE_DISTRACTOR:
                            System.out.println("PLAYING_TACTILE_DISTRACTOR");
                            break;
                        case PLAYING_VISUAL_DISTRACTOR:
                            System.out.println("PLAYING_VISUAL_DISTRACTOR");
                            break;
                        case WAITING_ON_SUPERVISOR:
                            System.out.println("WAITING_ON_SUPERVISOR");
                            updateTrialsPanelBlockFinished();
                            break;
                        case WAITING_USER_INPUT:
                            System.out.println("WAITING_USER_INPUT");
                            break;
                        case START_OF_TRIAL:
                            System.out.println("START_OF_TRIAL");
                            updateCurrentTrial();
                            updateTrialsPanel();
                            updateStatsPanel();
                            break;
                    }
                    break;
                case NEW_EXPERIMENTATION_ORDER:
                    updateBlockOrderPanel();
                    updatePraticeOrderPanel();
                    updateDistractorDescriptionPanel();
                    break;                
            }               
        }
    }

    /**
     * Refresh the description of the distractor at screen.
     */
    private void updateDistractorDescriptionPanel() {
        
        distractorDescription_panel.removeAll();
        distractorDescription_panel.setLayout(null);
        
        //Get variables used to pupolated the panel
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block currentBlock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);
        Block nextBlock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex+1);
        ArrayList<Component> panelComponents = new ArrayList();    
        Parameter distractor;
        
        if(currentBlock == null){
            return;
        }
        
        //The block has a tactile distractor
        if(currentBlock.getParameters().get(TactileDistractorParameter.class) != null){                     
            distType_label.setText("Tactile");
            distractor = currentBlock.getParameters().get(TactileDistractorParameter.class); 
        }
        //The block has a visual distractor
        else if (currentBlock.getParameters().get(VisualDistractorParameter.class) != null){
            distType_label.setText("Visuel");  
            distractor = currentBlock.getParameters().get(VisualDistractorParameter.class); 
        }
        //The block has no distractor
        else{
            distType_label.setText("Aucun");
            //Display next block's distractor
            JLabel nextBlockLabel = nextBlockPanel(nextBlock);
            distractorDescription_panel.add(nextBlockLabel);
            Dimension size = nextBlockLabel.getPreferredSize();
            nextBlockLabel.setBounds(10 , 0, size.width, size.height);
            distractorDescription_panel.repaint();
            distractorDescription_panel.revalidate();
            //Exit function
            return;
        }    
        
        //Poisiton of the distractor
        String position = "";
        switch (distractor.getParameterPositionInTrial()) {
            case BEFORE:
                position = "Avant";
                break;
            case AFTER:
                position = "Après";
                break;
        }
        panelComponents.add(new JLabel("Position: "+position));          
        
        //Tactile distractor specific informations
        if(currentBlock.getParameters().get(TactileDistractorParameter.class) != null){                     
            panelComponents.add(new JLabel("Courte vibration: "+((TactileDistractorParameter)distractor).getShortVibrationDuration()+" ms"));
            panelComponents.add(new JLabel("Long vibration: "+((TactileDistractorParameter)distractor).getLongVibrationDuration()+" ms"));
            panelComponents.add(new JLabel("Intervalle: "+((TactileDistractorParameter)distractor).getIntervalDuration()+" ms"));
            panelComponents.add(new JLabel("Nbr. de vibrations: "+((TactileDistractorParameter)distractor).getNumberOfVibration()));  
        }
        //Visual distractor specific informations
        else if (currentBlock.getParameters().get(VisualDistractorParameter.class) != null){
            panelComponents.add(new JLabel("Nbr. de formes possibles: "+((VisualDistractorParameter)distractor).getShapes().size()));
            panelComponents.add(new JLabel("Nbr. de couleurs possibles: "+((VisualDistractorParameter)distractor).getColors().size()));
            panelComponents.add(new JLabel("Durée: "+((VisualDistractorParameter)distractor).getDisplayTime()+" ms"));
            panelComponents.add(new JLabel("Intervalle: "+((VisualDistractorParameter)distractor).getIntervalDuration()+" ms"));
            panelComponents.add(new JLabel("Nbr. apparitions: "+((VisualDistractorParameter)distractor).getNumberOfAppearance()));
        }           

        panelComponents.add(nextBlockPanel(nextBlock));
        
        //Add all components to the panel
        int i = 0;
        for(Component comp: panelComponents){                
            distractorDescription_panel.add(comp);
            Dimension size = comp.getPreferredSize();

            comp.setBounds(10 , 20*i, size.width, size.height);
            i++;
        }

        distractorDescription_panel.revalidate();
        distractorDescription_panel.repaint();   
    }

    /**
     * Makes a label for the block passed in parameters
     * @param nextBlock
     *          next block in line for playback
     * @return 
     */
    private JLabel nextBlockPanel(Block nextBlock) {
        if(nextBlock != null){
            String nextBlockType="";
            if(nextBlock.getParameters().get(TactileDistractorParameter.class) != null){
                nextBlockType = "Tactile";
            }
            else if(nextBlock.getParameters().get(VisualDistractorParameter.class) != null){
                nextBlockType = "Visuel";
            }
            else{
                nextBlockType = "Aucun";
            }
            return new JLabel("Distracteur du prochain bloc: "+nextBlockType);
        }
        else{
            return new JLabel("");
        }
    }

    /**
     * Update trials panel to keep it up to date with past and current trials
     * informations.
     */
    private void updateTrialsPanel() {
        clearLastTrialPanel();
        clearCurrentTrialPanel();
        clearNextTrialPanel();        
        
        //Get variables used to pupolated the panel
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        int currentTrialIndex = m_controller.getSittingManager().getCurrentTrial();
        Trial currentTrial = m_controller.getSittingManager().getTrueTrial(currentBlockIndex, currentTrialIndex);
        Trial nextTrial = m_controller.getSittingManager().getTrueTrial(currentBlockIndex, currentTrialIndex+1);
        Trial lastTrial = m_controller.getSittingManager().getTrueTrial(currentBlockIndex, currentTrialIndex-1);
        
        if(lastTrial!=null){
            updateLastTrialPanel(lastTrial, currentTrialIndex-1, currentBlockIndex);
        }
        updateCurrentTrialPanel(currentTrial);
        if(nextTrial!=null){
            updateNextTrialPanel(nextTrial);
        }
        
        
        rightBlockSub_panel.revalidate();
        rightBlockSub_panel.repaint();
        
    }

    /**
     * Removes everything from the current trial panel
     */
    private void clearCurrentTrialPanel() {
        currentWords_panel.removeAll();
        currentDistractor_panel.removeAll();
    }
    
    /**
     * Removes everything from the next trial panel
     */
    private void clearNextTrialPanel() {
        nextWords_panel.removeAll();
        nextDistractor_panel.removeAll();
    }
    
    /**
     * Prepare the last trial panel by removing informations
     */
    private void clearLastTrialPanel() {
        //Clear the border in case the distractor before was a visual one
        distractorResponse_panel.setBorder(null);
        lastRealWords_panel.removeAll();
        WordsResponse_panel.removeAll();
        lastRealDistractor_panel.removeAll();
        distractorResponse_panel.removeAll();
        wordsResponseTime_label.setText("");
        totalResponseTime_label.setText("");
         distractorResponseTime_label.setText("");
    }

    /**
     * Updates the current words panel by showing what words and distractor are
     * playing in this trial.
     * @param currentTrial
     *          the trial the subject is currently experiencing
     */
    private void updateCurrentTrialPanel(Trial currentTrial) {
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block currentBLock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);
        for(String word: currentTrial.getWords()){
            currentWords_panel.add(new JLabel(word));
        }
        //Update current Distractor_panel
        if(currentBLock.getParameters().get(VisualDistractorParameter.class) != null){
            AbstractShape[] shapes = (AbstractShape[])(currentBLock.getParameters().get(VisualDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()));
            for(AbstractShape shape: shapes){
                shape.setSize(14);
            }
            ShapeListIcon shapesIcon = new ShapeListIcon(shapes, 3);
            JLabel shapeLabelIcon = new JLabel(shapesIcon);           
            
            currentDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(25*shapes.length,14));           
        }
        else if(currentBLock.getParameters().get(TactileDistractorParameter.class) != null){
            String[] pulses = (String[])(currentBLock.getParameters().get(TactileDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()));
            
            AbstractShape[] shapes = new AbstractShape[pulses.length];
            for(int i=0 ; i<pulses.length; i++){
                AbstractShape shape;
                if(pulses[i].equals("L")){
                    shape = new Rectangle();
                    shape.setSize(28, 14);
                }
                else{
                    shape = new Circle();
                    shape.setSize(14);                    
                }
                shapes[i] = shape;
            }
            
            JLabel shapeLabelIcon = new JLabel(new ShapeListIcon(shapes, 3)); 
            currentDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(35*shapes.length,14)); 
        }
    }

    /**
     * Update last trial panel by showing last distractor and answers.
     * @param lastTrial
     *          the last trial played
     * @param lastTrialIndex
     *          the index of the last trial
     * @param blockIndex 
     *          the index of the current block
     */
    private void updateLastTrialPanel(Trial lastTrial, int lastTrialIndex, int blockIndex) {
        int currentBlockIndex = blockIndex;
        Block currentBLock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);
        
        for(String word: lastTrial.getWords()){
            lastRealWords_panel.add(new JLabel(word));
        }
        double wordsResponseTime = 0;
        double distResponseTime =0;
        TrialResult trialResult = m_controller.getSittingManager().getBlockResult(blockIndex).getTrialResult(lastTrialIndex);
        for(int i=0; i<lastTrial.getWords().size(); i++){
            JLabel wordLabel = new JLabel( trialResult.getWordAnswer(i).getWord());
            if(trialResult.getWordAnswer(i).isRightAnswer()){
                wordLabel.setForeground(new Color(0,150,0));
            }
            else{
                wordLabel.setForeground(Color.red);
            }
            WordsResponse_panel.add(wordLabel);
            
            if(wordsResponseTime<trialResult.getWordAnswer(i).getAnswerTime()){
                wordsResponseTime = trialResult.getWordAnswer(i).getAnswerTime();
            }           
        }
        wordsResponseTime_label.setText((int)(wordsResponseTime*1000)+" ms");
        //Update Last Distractor_panel
        //Last distractor was a visual distractor
        if(currentBLock.getParameters().get(VisualDistractorParameter.class) != null){
            AbstractShape[] shapes;            
            if(currentBLock.equals(m_controller.getSittingManager().getTrueBlock(blockIndex))){
                shapes = (AbstractShape[])(currentBLock.getParameters().get(VisualDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()-1));
            }
            else{
                shapes = (AbstractShape[])(currentBLock.getParameters().get(VisualDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()-2));
            }
            for(AbstractShape shape: shapes){
                shape.setSize(14);
            }            
            
            JLabel shapeLabelIcon = new JLabel(new ShapeListIcon(shapes, 3)); 
            lastRealDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(25*shapes.length,14));
            
            AbstractShape[] responsesShapes = trialResult.getVisualResult().getShapes();
            for(AbstractShape shape: responsesShapes){
                shape.setSize(14);
            }
            JLabel responseShapeLabelIcon = new JLabel(new ShapeListIcon(responsesShapes, 3)); 
            distractorResponse_panel.add(responseShapeLabelIcon);
            responseShapeLabelIcon.setPreferredSize(new Dimension(25*shapes.length,14));
            
            distResponseTime = trialResult.getVisualResult().getAnswerTime();
            distractorResponseTime_label.setText((int)(distResponseTime*1000)+" ms");
            
            if(trialResult.getVisualResult().isRightAnswer()){
                distractorResponse_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 150, 0)));
            }
            else{
                distractorResponse_panel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 0, 0)));
            }
        }
        //Last distractor was a tactile distractor
        else if(currentBLock.getParameters().get(TactileDistractorParameter.class) != null){
            
            String[] pulses ;
            
            if(currentBLock.equals(m_controller.getSittingManager().getTrueBlock(blockIndex))){
                pulses = (String[])(currentBLock.getParameters().get(TactileDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()-1));
            }
            else{
                pulses = (String[])(currentBLock.getParameters().get(TactileDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()-2));
            }
            
            AbstractShape[] shapes = new AbstractShape[pulses.length];
            for(int i=0 ; i<pulses.length; i++){
                AbstractShape shape;
                if(pulses[i].equals("L")){
                    shape = new Rectangle();
                    shape.setSize(28, 14);
                }
                else{
                    shape = new Circle();
                    shape.setSize(14);                    
                }
                shapes[i] = shape;
            }
            
            JLabel shapeLabelIcon = new JLabel(new ShapeListIcon(shapes, 3)); 
            lastRealDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(35*shapes.length,14));
            
            AbstractShape[] responsesShapes = trialResult.getTactileResult().getShapes();
            for(AbstractShape shape: responsesShapes){
                if(shape.getSize().width == shape.getSize().height){
                    shape.setSize(14);
                }
                else{
                    shape.setSize(28,14);
                }
                
                if(trialResult.getTactileResult().isRightAnswer()){
                    shape.setShapeColor(new java.awt.Color(0, 150, 0));
                }
                else{
                    shape.setShapeColor(new java.awt.Color(255, 0, 0));
                }
            }
            JLabel responseShapeLabelIcon = new JLabel(new ShapeListIcon(responsesShapes, 3)); 
            distractorResponse_panel.add(responseShapeLabelIcon);
            responseShapeLabelIcon.setPreferredSize(new Dimension(35*shapes.length,14));
            
            distResponseTime = trialResult.getTactileResult().getAnswerTime();
            distractorResponseTime_label.setText((int)(distResponseTime*1000)+" ms");
            

        }
        totalResponseTime_label.setText((int)((wordsResponseTime+distResponseTime)*1000)+" ms");
            
    }

    /**
     * Update next trial information by showing what words and distractor will be played
     * @param nextTrial
     *          the next trial to be played
     */
    private void updateNextTrialPanel(Trial nextTrial) {
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block currentBLock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);
        for(String word: nextTrial.getWords()){
            nextWords_panel.add(new JLabel(word));
        }
       if(currentBLock.getParameters().get(VisualDistractorParameter.class) != null){
            AbstractShape[] shapes = (AbstractShape[])(currentBLock.getParameters().get(VisualDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()+1));
            for(AbstractShape shape: shapes){
                shape.setSize(14);
            }
            
            JLabel shapeLabelIcon = new JLabel(new ShapeListIcon(shapes, 3)); 
            nextDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(25*shapes.length,14));           
        }
        else if(currentBLock.getParameters().get(TactileDistractorParameter.class) != null){
            String[] pulses = (String[])(currentBLock.getParameters().get(TactileDistractorParameter.class).orderOfPlay(m_controller.getSittingManager().getCurrentSeed()+1));
            
            AbstractShape[] shapes = new AbstractShape[pulses.length];
            for(int i=0 ; i<pulses.length; i++){
                AbstractShape shape;
                if(pulses[i].equals("L")){
                    shape = new Rectangle();
                    shape.setSize(28, 14);
                }
                else{
                    shape = new Circle();
                    shape.setSize(14);                    
                }
                shapes[i] = shape;
            }
            
            JLabel shapeLabelIcon = new JLabel(new ShapeListIcon(shapes, 3)); 
            nextDistractor_panel.add(shapeLabelIcon);
            shapeLabelIcon.setPreferredSize(new Dimension(35*shapes.length,14)); 
        }
    }

    /**
     * Update informations at the end of a block.
     */
    private void updateTrialsPanelBlockFinished() {
        clearLastTrialPanel();
        clearCurrentTrialPanel();
        clearNextTrialPanel();        
        
        //Get variables used to pupolated the panel
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block lastBlock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex-1);
        Trial lastTrial = m_controller.getSittingManager().getTrueTrial(currentBlockIndex-1, lastBlock.getTrials().size()-1);
        
        if(lastTrial!=null){
            updateLastTrialPanel(lastTrial, lastBlock.getTrials().size()-1, currentBlockIndex-1);
        }
        
        rightBlockSub_panel.revalidate();
        rightBlockSub_panel.repaint();
    }

    /**
     * Update statistical information on the subject's answer so far.
     */
    private void updateStatsPanel() {
        wordStats_label.setText("");
        avRespTime_label.setText("");
        distractorStats_label.setText("");
        
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block currentBLock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);
        int currentTrialIndex = m_controller.getSittingManager().getCurrentTrial();
           
        if(currentTrialIndex>0){
            double totalAvTime = 0;
            BlockResult currentBlockResult = m_controller.getSittingManager().getBlockResult(currentBlockIndex);
            int wordStat = (int)AStat.getInstance().getCurrentWordAverage(currentBlockResult, currentTrialIndex);
            wordStats_label.setText(wordStat+"%"); 
            
            totalAvTime+=AStat.getInstance().getCurrentWordAverageTime(currentBlockResult, currentTrialIndex);
            
            if(currentBLock.getParameters().get(VisualDistractorParameter.class) != null){
                int visualStat = (int)AStat.getInstance().getCurrentVisualAverage(currentBlockResult, currentTrialIndex);
                totalAvTime+=AStat.getInstance().getCurrentVisualAverageTime(currentBlockResult, currentTrialIndex);
                distractorStats_label.setText(visualStat+"%");               
            }
            else if(currentBLock.getParameters().get(TactileDistractorParameter.class) != null){
                int tactileStat = (int)AStat.getInstance().getCurrentTactileAverage(currentBlockResult, currentTrialIndex);
                totalAvTime+=AStat.getInstance().getCurrentTactileAverageTime(currentBlockResult, currentTrialIndex);
                distractorStats_label.setText(tactileStat+"%"); 
            }
            else{
                distractorStats_label.setText("Aucun");
            }
            avRespTime_label.setText((int)(totalAvTime*1000)+" ms");
        }
        
        statistics_panel.revalidate();
        statistics_panel.repaint();
    }
    
    /**
     * Listener called when a practice block is pressed
     * @param evt 
     */
    private void selectPractice_buttonActionPerformed(ActionEvent evt) {
        JToggleButton practiceButton = (JToggleButton)evt.getSource();
        m_controller.startPractice(m_practiceButtons.inverse().get(practiceButton));
    }

    /**
     * Changes the current block.
     */
    private void changeCurrentBlock() {
        int currentBlockIndex = m_controller.getSittingManager().getCurrentBlock();
        Block currentBlock = m_controller.getSittingManager().getTrueBlock(currentBlockIndex);        
        if(currentBlock!=null){
            for(Block block: m_blockButtons.keySet()){
                m_blockButtons.get(block).setSelected(currentBlock.equals(block));            
            }
        }
        else{
            for(Block block: m_blockButtons.keySet()){
                m_blockButtons.get(block).setSelected(false);            
            }
        }
    }

}
