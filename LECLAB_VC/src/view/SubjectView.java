package view;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import event.LeclabEvent;
import experiment.Block;
import experiment.Experimentation;
import java.awt.*;
import java.util.Observable;
import java.util.Observer;
import javax.swing.JFrame;
import parameters.NoiseParameter;
import sitting.SittingManager;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.component.AudioMediaPlayerComponent;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;
import utility.Global;
import view.component.contentpane.AbstractContentPane;
import view.component.contentpane.TactileDistractorContentPane;
import view.component.contentpane.TrialAnswersContentPane;
import view.component.contentpane.TrialBeginContentPane;
import view.component.contentpane.TrialPlayerContentPane;
import view.component.contentpane.VisualDistractorContentPane;

/**
 * View used to show the subject the various stimulus and get it's reactions.
 * @author Jean-Etienne Salois
 */
public class SubjectView extends javax.swing.JFrame implements Observer{
    TrialAnswersContentPane m_trialAnswerContentPane;
    AbstractContentPane m_state;
    SittingManager m_sittingManager;
    AudioMediaPlayerComponent m_noisePlayer;
    
    /**
     * Creates new form SubjectView
     */
    public SubjectView (GraphicsConfiguration gc,  SittingManager sittingManager){
        super(gc);
        initComponents();
        m_sittingManager = sittingManager;
        m_state = new TrialBeginContentPane(sittingManager);
        this.setContentPane(m_state);
        this.setVisible(true);
        this.setExtendedState( this.getExtendedState()|JFrame.MAXIMIZED_BOTH );
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        m_sittingManager.addObserver(this);

        
        NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), Global.VLC_APPLICATION_PATH_64);
        Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);
        
        m_noisePlayer = new AudioMediaPlayerComponent();       
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 605, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 432, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    /**
     * Function called when the observable objects observed by this observer are
     * notifying a change.
     * @param o
     * @param arg 
     */
    @Override
    public void update(Observable o, Object arg) {
        if(arg.equals(LeclabEvent.SITTING_STATE_CHANGED)){
             switch (m_sittingManager.getState()){
                case WAITING_ON_SUPERVISOR:
                    m_state = new TrialBeginContentPane(m_sittingManager);
                    break;
                case START_OF_BLOCK:
                    break;
                case PLAYING_VISUAL_DISTRACTOR:
                    m_state = new VisualDistractorContentPane(m_sittingManager, this.getContentPane().getSize());
                    break;
                case PLAYING_TACTILE_DISTRACTOR:
                    m_state = new TactileDistractorContentPane(m_sittingManager);
                    break;
                case PLAYING_TRIAL_VIDEO:
                    m_state = new TrialPlayerContentPane(m_sittingManager);
                    startNoise();
                    break;
                case WAITING_USER_INPUT:
                    m_state = new  TrialAnswersContentPane(m_sittingManager);
                    stopNoise();
                    break;
                case END_OF_SITTING:
                    stopNoise();
                    this.dispose();
                    return;  
                default:
                    return;
            }
            this.setContentPane(m_state);
            m_state.handleStateChange();
            this.refresh();
        }
    }
    
    /**
     * Refresh the panel
     */
    private void refresh(){
        this.revalidate();
        this.repaint();
    }

    /**
     * Starts noise audio file if needed
     */
    private void startNoise() {
        int blockIndex = m_sittingManager.getCurrentBlock();
        Block currentBlock = Experimentation.getInstance().getRealBlocks().get(blockIndex);
        NoiseParameter noise = (NoiseParameter) currentBlock.getParameters().get(NoiseParameter.class);
        //Noise need to be played
        if(noise != null){
            System.out.println(noise.getFile().getAbsolutePath());
            m_noisePlayer.getMediaPlayer().playMedia(noise.getFile().getAbsolutePath());
        }
    }
    
    /**
     * Stop the noise audio playback if needed
     */
    private void stopNoise(){
        m_noisePlayer.getMediaPlayer().stop();
    }

}
